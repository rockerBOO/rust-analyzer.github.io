<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust-analyzer</title>
    <description>rust-analyzer: building a better Rust IDE</description>
    <link>https://rust-analyzer.github.io//</link>
    <atom:link href="https://rust-analyzer.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 20 Jul 2020 15:25:24 +0000</pubDate>
    <lastBuildDate>Mon, 20 Jul 2020 15:25:24 +0000</lastBuildDate>
    <generator>Jekyll v3.8.7</generator>
    
      <item>
        <title>Changelog #34</title>
        <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/07/20/changelog-34.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/07/20/changelog-34.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/c9c518e5e9761bf35d466c47c57c3a1358b56b3c&quot;&gt;&lt;code&gt;c9c518e&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-07-20&quot;&gt;&lt;code&gt;2020-07-20&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;opecollective.com/rust-analyzer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5378&quot;&gt;&lt;code&gt;#5378&lt;/code&gt;&lt;/a&gt; support vararg functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5354&quot;&gt;&lt;code&gt;#5354&lt;/code&gt;&lt;/a&gt; add Cargo feature for enabling mimalloc allocator.
Call for participation: pure Rust version of mimalloc would be really handy as cross-compilable fast allocator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5345&quot;&gt;&lt;code&gt;#5345&lt;/code&gt;&lt;/a&gt; emit mutable modifier for &lt;code&gt;self&lt;/code&gt; in semantic highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5348&quot;&gt;&lt;code&gt;#5348&lt;/code&gt;&lt;/a&gt; highlight punctuation using &lt;code&gt;&quot;operator&quot;&lt;/code&gt; tag in semantic highlighting.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5350&quot;&gt;&lt;code&gt;#5350&lt;/code&gt;&lt;/a&gt; return only requested assists to the editor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5401&quot;&gt;&lt;code&gt;#5401&lt;/code&gt;&lt;/a&gt; leverage chalk for type checking closures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5418&quot;&gt;&lt;code&gt;#5418&lt;/code&gt;&lt;/a&gt; continue non-doc comments if there&amp;#8217;s a trailing whitespace:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/87931694-7d050500-ca8a-11ea-8b3f-c958663795e6.gif&quot; alt=&quot;87931694 7d050500 ca8a 11ea 8b3f c958663795e6&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5327&quot;&gt;&lt;code&gt;#5327&lt;/code&gt;&lt;/a&gt; mark fixes from check on save as preferred.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5430&quot;&gt;&lt;code&gt;#5430&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add turbofish&lt;/strong&gt; assist works after &lt;code&gt;()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/87852942-8f563600-c906-11ea-808b-63e8bf3fc228.gif&quot; alt=&quot;87852942 8f563600 c906 11ea 808b 63e8bf3fc228&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4676&quot;&gt;&lt;code&gt;#4676&lt;/code&gt;&lt;/a&gt; upgrade procmacro ABI for the latest stable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5352&quot;&gt;&lt;code&gt;#5352&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5361&quot;&gt;&lt;code&gt;#5361&lt;/code&gt;&lt;/a&gt; fix build on powerpc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5367&quot;&gt;&lt;code&gt;#5367&lt;/code&gt;&lt;/a&gt; remove associated type bounds in &lt;strong&gt;Add Missing Members&lt;/strong&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5370&quot;&gt;&lt;code&gt;#5370&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t insert duplicate &lt;code&gt;()&lt;/code&gt; when completing tuple struct pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5377&quot;&gt;&lt;code&gt;#5377&lt;/code&gt;&lt;/a&gt; fix goto definition for multi-segment macro paths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5379&quot;&gt;&lt;code&gt;#5379&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5396&quot;&gt;&lt;code&gt;#5396&lt;/code&gt;&lt;/a&gt; guard against infinite macro expansion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5381&quot;&gt;&lt;code&gt;#5381&lt;/code&gt;&lt;/a&gt; fix macro handling in type position.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5385&quot;&gt;&lt;code&gt;#5385&lt;/code&gt;&lt;/a&gt; fix off by one error when determining the active param.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5390&quot;&gt;&lt;code&gt;#5390&lt;/code&gt;&lt;/a&gt; fix progress registration error for check on save.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5394&quot;&gt;&lt;code&gt;#5394&lt;/code&gt;&lt;/a&gt; fix freeze when processing &lt;a href=&quot;https://github.com/retep998/winapi-rs&quot;&gt;a certain crate&lt;/a&gt; with a lot of glob imports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5427&quot;&gt;&lt;code&gt;#5427&lt;/code&gt;&lt;/a&gt; various fixes for &lt;strong&gt;Add/Remove #&lt;/strong&gt; assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5423&quot;&gt;&lt;code&gt;#5423&lt;/code&gt;&lt;/a&gt; Correctly resolve associated types in path bindings.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5357&quot;&gt;&lt;code&gt;#5357&lt;/code&gt;&lt;/a&gt; use relaxed atomic ordering for single location test marks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5358&quot;&gt;&lt;code&gt;#5358&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5373&quot;&gt;&lt;code&gt;#5373&lt;/code&gt;&lt;/a&gt; cleanup hir diagnostics API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5355&quot;&gt;&lt;code&gt;#5355&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5376&quot;&gt;&lt;code&gt;#5376&lt;/code&gt;&lt;/a&gt; implement license check.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5387&quot;&gt;&lt;code&gt;#5387&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;--memory-usage&lt;/code&gt; to analysis-bench.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5405&quot;&gt;&lt;code&gt;#5405&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5415&quot;&gt;&lt;code&gt;#5415&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5417&quot;&gt;&lt;code&gt;#5417&lt;/code&gt;&lt;/a&gt; refactor support for callables, so that IDE features that work for functions, work for lambdas as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5413&quot;&gt;&lt;code&gt;#5413&lt;/code&gt;&lt;/a&gt; rewrite call info to use semantic information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5422&quot;&gt;&lt;code&gt;#5422&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;expect!&lt;/code&gt; for snapshot testing in &lt;code&gt;ra_hir_def&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5433&quot;&gt;&lt;code&gt;#5433&lt;/code&gt;&lt;/a&gt; simplify file exclusion logic in VFS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Three Architectures for a Responsive IDE</title>
        <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//blog/2020/07/20/three-architectures-for-responsive-ide.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//blog/2020/07/20/three-architectures-for-responsive-ide.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;rust-analyzer is a new &quot;IDE backend&quot; for the &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; programming language.
Support rust-analyzer on &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this post, we&amp;#8217;ll learn how to make a snappy IDE, in three different ways :-)
It was inspired by this excellent article about using datalog for semantic analysis: &lt;a href=&quot;https://petevilter.me/post/datalog-typechecking/&quot; class=&quot;bare&quot;&gt;https://petevilter.me/post/datalog-typechecking/&lt;/a&gt;
The post describes only the highest-level architecture.
There&amp;#8217;s &lt;strong&gt;much&lt;/strong&gt; more to implementing a full-blown IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Specifically, we&amp;#8217;ll look at the backbone infrastructure of an IDE which serves two goals:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Quickly accepting new edits to source files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Providing type information about currently opened files for highlighting, completion, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;map-reduce&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#map-reduce&quot;&gt;&lt;/a&gt;Map Reduce&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first architecture is reminiscent of map-reduce paradigm.
The idea is to split analysis into relatively simple indexing phase, and a separate full analysis phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The core constraint of indexing is that it runs on a per-file basis.
The indexer takes a text of a single file, parses it, and spits out some data about the file.
The indexer can&amp;#8217;t touch other files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Full analysis can read other files, and it leverages information from the index to save work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This all sounds way too abstract, so let&amp;#8217;s look at a specific example&amp;#8201;&amp;#8212;&amp;#8201;Java.
In Java, each file starts with a package declaration.
The indexer concatenates the name of the package with a class name to get a fully-qualified name (FQN).
It also collects the set of method declared in the class, the list of superclasses and interfaces, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Per-file data is merged into an index which maps FQNs to classes.
Note that constructing this mapping is an embarrassingly parallel task&amp;#8201;&amp;#8212;&amp;#8201;all files are parsed independently.
Moreover, this map is cheap to update.
When a file change arrives, this file&amp;#8217;s contribution from the index is removed, the text of file is changed and the indexer runs on the new text and adds new contributions.
The amount of work to do is proportional to the number of changed files, and is independent from the total number of files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s see how FQN index can be used to quickly provide completion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// File ./mypackage/Foo.java&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mypackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// File ./mypackage/Bar.java&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mypackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// File ./Main.java&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;mypackage.Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user has just typed &lt;code&gt;Foo.f().&lt;/code&gt;, and we need to figure out that the type of receiver expression is &lt;code&gt;Bar&lt;/code&gt;, and suggest &lt;code&gt;g&lt;/code&gt; as a completion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, as the &lt;code&gt;Main.java&lt;/code&gt; file is modified, we run the indexer on this single file.
Nothing has changed (the file still contains &lt;code&gt;Main&lt;/code&gt; class with static &lt;code&gt;main&lt;/code&gt; method), so we don&amp;#8217;t need to update FQN index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, we need to resolve &lt;code&gt;Foo&lt;/code&gt; name.
We parse the file, notice an &lt;code&gt;import&lt;/code&gt; and lookup &lt;code&gt;mypackage.Foo&lt;/code&gt; in the FQN index.
In the index, we also find that &lt;code&gt;Foo&lt;/code&gt; has a static method &lt;code&gt;f&lt;/code&gt;, so we resolve the call as well.
The index also stores the return type of &lt;code&gt;f&lt;/code&gt;, but, and this is crucial, it stores it as a string &lt;code&gt;&quot;Bar&quot;&lt;/code&gt;, and not as a direct reference to the class &lt;code&gt;Bar&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The reason for that is &lt;code&gt;import java.util.*&lt;/code&gt; in &lt;code&gt;Foo.java&lt;/code&gt;.
&lt;code&gt;Bar&lt;/code&gt; can refer either to &lt;code&gt;java.util.Bar&lt;/code&gt; or to &lt;code&gt;mypackage.Bar&lt;/code&gt;.
The indexer doesn&amp;#8217;t know which one, because it can look &lt;strong&gt;only&lt;/strong&gt; at the text of the &lt;code&gt;Foo.java&lt;/code&gt;.
In other words, while the index does store the return types of methods, it stores them in an unresolved form.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next step is to resolve &lt;code&gt;Bar&lt;/code&gt; identifier in the context of &lt;code&gt;Foo.java&lt;/code&gt; file.
This uses FQN index, and lands into the &lt;code&gt;mypackage.Bar&lt;/code&gt; class.
There the desired &lt;code&gt;g&lt;/code&gt; method is found.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All together, only three files were touched during completion.
FQN index allowed to completely ignore all the other files in the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One problem with the approach described thus far is that resolving types from the index requires non-trivial amount of work.
This work might be duplicated if, for example, &lt;code&gt;Foo.f&lt;/code&gt; is called several times.
The fix is to add a cache.
Name resolution results are memoized, so that the cost is paid only once.
The cache is blown away completely on any change&amp;#8201;&amp;#8212;&amp;#8201;with an index, reconstructing the cache is not that costly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To sum up, the first approach works like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Each file is being indexed, independently and in parallel, producing a &quot;stub&quot;&amp;#8201;&amp;#8212;&amp;#8201;a set of visible top-level declarations, with unresolved types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All stubs are merged into a single index data structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name resolution and type inference work primarily off the stubs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name resolution is lazy (we only resolved type from the stub when we need it) and memoized (each type is resolved only once).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The caches are completely invalidated on every change&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The index is updated incrementally:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;if the edit doesn&amp;#8217;t change file&amp;#8217;s stub, no change to the index is required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;otherwise, old keys are removed and new keys are added&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note an interesting interplay between &quot;dumb&quot; indexes which can be incrementally updated, and &quot;smart&quot; caches, which are re-computed from scratch.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach combines simplicity and stellar performance.
The bulk of work is the indexing phase, and you can parallelize and even distribute it across several machine.
The two example of this architecture are &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt; and &lt;a href=&quot;https://sorbet.org/&quot;&gt;Sorbet&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main drawback of this approach is that it works only when it works&amp;#8201;&amp;#8212;&amp;#8201;not every language has a well-defined FQN concept.
I think overall it&amp;#8217;s a good idea to design name resolution and module system (mostly boring parts of the language) such that they work well with map-reduce paradigm.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Require &lt;code&gt;package&lt;/code&gt; declarations or infer them from a file-system layout&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Forbid meta-programming facilities which add new top-level declarations, or restrict them in such way that they can be used by the indexer.
For example, preprocessor-like compiler plugins that access a single file at a time might be fine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure that each source element corresponds to a single semantic element.
For example, if the language supports conditional compilation, make sure that it works during name resolution (like Kotlin&amp;#8217;s &lt;a href=&quot;https://kotlinlang.org/docs/reference/platform-specific-declarations.html&quot;&gt;expect/actual&lt;/a&gt;) and not during parsing (like conditional compilation in most other languages).
Otherwise, you&amp;#8217;d have to index the same file with different conditional compilation settings, and that is messy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure that FQN are enough for most of the name resolution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last point is worth elaborating. Let&amp;#8217;s look at the following Rust example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;// File: ./foo.rs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// File: ./bar.rs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// File: ./somewhere/else.rs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// File: ./main.s&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, we can easily find the &lt;code&gt;S&lt;/code&gt; struct and the &lt;code&gt;T&lt;/code&gt; trait (as they are imported directly).
However, to make sure that &lt;code&gt;s.f&lt;/code&gt; indeed refers to &lt;code&gt;f&lt;/code&gt; from &lt;code&gt;T&lt;/code&gt;, we also need to find the corresponding &lt;code&gt;impl&lt;/code&gt;, and that can be roughly anywhere!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;leveraging-headers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#leveraging-headers&quot;&gt;&lt;/a&gt;Leveraging Headers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second approach places even more restrictions on the language.
It requires:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&quot;declaration before use&quot; rule,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;headers or equivalent interface files.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two such languages are C&amp;#43;&amp;#43; and OCaml.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The idea of the approach is simple&amp;#8201;&amp;#8212;&amp;#8201;just use traditional compiler, by snapshotting its state immediately after imports for each compilation unit.
An example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello, World!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the compiler fully processes &lt;code&gt;iostream&lt;/code&gt; (and any further headers it includes), snapshots its state and proceeds with parsing the program itself.
When the user types more characters, the compiler restarts from the point just after the include.
As the size of each compilation unit itself is usually reasonable, the analysis is fast.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If the user types something into the header file than the caches need to be invalidated.
However, changes to headers are comparatively rare, most of the code lives in &lt;code&gt;.cpp&lt;/code&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a sense, headers correspond to the stubs of the first approach, with two notable differences:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;#8217;s the user who is tasked with producing a stub, not the tool.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unlike stubs, headers can&amp;#8217;t be mutually recursive.
Stubs store unresolved types, but includes can be snapshotted after complete analysis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The two examples of this approach are &lt;a href=&quot;https://github.com/ocaml/merlin&quot;&gt;Merlin&lt;/a&gt; of OCaml and &lt;a href=&quot;https://clangd.llvm.org/&quot;&gt;clangd&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The huge benefit of this approach is that it allows re-use of an existing batch compiler.
Two other approaches described in the article typically result in compiler re-writes.
The drawback is that almost nobody likes headers and forward declarations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;intermission-laziness-vs-incrementality&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#intermission-laziness-vs-incrementality&quot;&gt;&lt;/a&gt;Intermission: Laziness vs Incrementality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note how neither of the two approaches is incremental in any interesting way.
It is mostly &quot;if something has changed, let&amp;#8217;s clear the caches completely&quot;.
There&amp;#8217;s a tiny bit of incrementality in the index update in the first approach, but it is almost trivial&amp;#8201;&amp;#8212;&amp;#8201;remove old keys, add new keys.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is because it&amp;#8217;s not the incrementality that makes and IDE fast.
Rather, it&amp;#8217;s laziness&amp;#8201;&amp;#8212;&amp;#8201;the ability to skip huge swaths of code altogether.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With map-reduce, the index tells us exactly which small set of files is used from the current file and is worth looking at.
Headers shield us from most of the implementation code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;query-based-compiler&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#query-based-compiler&quot;&gt;&lt;/a&gt;Query-based Compiler&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Welcome to my world&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rust fits the described approaches like a square peg into a round hole.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a small example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nd&quot;&gt;#[macro_use]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bitflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;bitflags!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0b00000001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0b00000010&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0b00000100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.bits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.bits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.bits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;bitflags&lt;/code&gt; is macro which comes from another crate and defines a top-level declaration.
We can&amp;#8217;t put the results of macro expansion into the index, because it depends on macro definition in another file.
We can put macro call itself into an index, but that is mostly useless, as the items, declared by the macro, would miss the index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s another one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;rust&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[path&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo.rs&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Modules &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; refer to the same file, &lt;code&gt;foo.rs&lt;/code&gt;, which effectively means that items from &lt;code&gt;foo.rs&lt;/code&gt; are duplicated.
If &lt;code&gt;foo.rs&lt;/code&gt; contains &lt;code&gt;struct S;&lt;/code&gt; declaration, than &lt;code&gt;foo::S&lt;/code&gt; and &lt;code&gt;bar::S&lt;/code&gt; are different types.
You also can&amp;#8217;t fit that into an index, because those &lt;code&gt;mod&lt;/code&gt; declarations are in a different file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The second approach doesn&amp;#8217;t work either.
In C&amp;#43;&amp;#43;, the compilation unit is a single file.
In Rust, the compilation unit is a whole crate, which consists of many files and is typically much bigger.
And Rust has procedural macros, which means that even surface analysis of code can take unbounded amount of time.
And there are no header files, so IDE has to process the whole crate.
Additionally, intra-crate name resolution is much more complicated (declaration before use vs. fixed point iteration intertwined with macro expansion).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It seems that purely laziness based models do not work for Rust.
The minimal feasible unit of laziness, a crate, is still too big.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this reason, in rust-analyzer we resort to a smart solution.
We compensate for the deficit of laziness with incrementality.
Specifically, we use a generic framework for incremental computation&amp;#8201;&amp;#8212;&amp;#8201;&lt;a href=&quot;https://github.com/salsa-rs/salsa&quot;&gt;salsa&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The idea behind salsa is rather simple&amp;#8201;&amp;#8212;&amp;#8201;all function calls inside the compiler are instrumented to record which other functions were called during execution.
The recorded traces are used to implement fine-grained incrementality.
If after modification the results of all of the dependencies are the same, the old result is reused.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s also an additional, crucial, twist&amp;#8201;&amp;#8212;&amp;#8201;if a function is re-executed due to a change in dependency, the new result is compared with the old one.
If despite a different input they are the same, the propagation of invalidation stops.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using this engine, we were able to implement rather fancy update strategy.
Unlike map reduce approach, our indices can store resolved types, which are invalidated only when top-level change occurs.
Even after a top-level change, we are able to re-use results of most macro expansions.
And typing inside top-level macro also doesn&amp;#8217;t invalidate caches unless the expansion of the macro introduces a different set of items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main benefit of this approach is generality and correctness.
If you have an incremental computation engine at your disposal, it becomes relatively easy to experiment with the way you structure the computation.
The code looks mostly like a boring imperative compiler, and you are immune from cache invalidation bugs (we had one, due to procedural macro being non-deterministic).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The main drawback is extra complexity, slower performance (fine-grained tracking of dependencies takes time and memory) and a feeling that this is a somewhat uncharted territory yet :-)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;links&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#links&quot;&gt;&lt;/a&gt;Links&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;How IntelliJ works&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;https://jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs.html&quot; class=&quot;bare&quot;&gt;https://jetbrains.org/intellij/sdk/docs/basics/indexing_and_psi_stubs.html&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;How Sorbet works&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Gdx6by6tcvw&quot; class=&quot;bare&quot;&gt;https://www.youtube.com/watch?v=Gdx6by6tcvw&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;How clangd works&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;https://clangd.llvm.org/design/&quot; class=&quot;bare&quot;&gt;https://clangd.llvm.org/design/&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;How Merlin works&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;https://arxiv.org/abs/1807.06702&quot; class=&quot;bare&quot;&gt;https://arxiv.org/abs/1807.06702&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;How rust-analyzer works&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev&quot; class=&quot;bare&quot;&gt;https://github.com/rust-analyzer/rust-analyzer/tree/master/docs/dev&lt;/a&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #33</title>
        <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/07/13/changelog-33.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/07/13/changelog-33.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/5ca7cd960b908944a2f3f66a1d0ee5df98b78959&quot;&gt;&lt;code&gt;5ca7cd9&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-07-13&quot;&gt;&lt;code&gt;2020-07-13&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://ferrous-systems.com/&quot;&gt;Ferrous Systems&lt;/a&gt; is a Berlin based consultancy focused on the Rust Programming language.
Ferrous Systems offers advice, training, open source development, and proprietary development services for a wide variety of applications in Rust, including embedded systems, compiler/tooling components, and web/backend technologies.
This week, Ferrous Systems is running &lt;a href=&quot;https://oxidizeconf.com/&quot;&gt;Oxidize Global&lt;/a&gt;, an online conference for embedded systems in Rust!
Thanks to Ferrous Systems for supporting open source projects like rust-analyzer!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;opecollective.com/rust-analyzer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5293&quot;&gt;&lt;code&gt;#5293&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5299&quot;&gt;&lt;code&gt;#5299&lt;/code&gt;&lt;/a&gt; automatically reload workspace on &lt;code&gt;Cargo.toml&lt;/code&gt; and similar changes.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/87297466-c4c6e200-c508-11ea-9fb0-519757220b5d.gif&quot; alt=&quot;87297466 c4c6e200 c508 11ea 9fb0 519757220b5d&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rust-analyzer is available via rustup:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rustup update nightly
info: syncing channel updates ...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rustup component add &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--toolchain&lt;/span&gt; nightly rust-analyzer-preview
info: installing component ...
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rustup run nightly rust-analyzer &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
rust-analyzer 8b0983e
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment, the recommended way to install rust-analyzer is still via GitHub release.&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4972&quot;&gt;&lt;code&gt;#4972&lt;/code&gt;&lt;/a&gt; gzip rust-analyzer releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5244&quot;&gt;&lt;code&gt;#5244&lt;/code&gt;&lt;/a&gt; add a command to compute memory usage statistics using Archimedes' method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5270&quot;&gt;&lt;code&gt;#5270&lt;/code&gt;&lt;/a&gt; highlight error for calls with too few/too many arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5284&quot;&gt;&lt;code&gt;#5284&lt;/code&gt;&lt;/a&gt; add folding for record literals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5292&quot;&gt;&lt;code&gt;#5292&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Goto Type Definition&lt;/strong&gt; works for &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5294&quot;&gt;&lt;code&gt;#5294&lt;/code&gt;&lt;/a&gt; complete function parameters in more cases&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/87296648-60efe980-c507-11ea-95d5-9b66623e2636.gif&quot; alt=&quot;87296648 60efe980 c507 11ea 95d5 9b66623e2636&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5314&quot;&gt;&lt;code&gt;#5314&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;parameter&lt;/code&gt; semantic tag for function parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5326&quot;&gt;&lt;code&gt;#5326&lt;/code&gt;&lt;/a&gt; add type inference support for unions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5319&quot;&gt;&lt;code&gt;#5319&lt;/code&gt;&lt;/a&gt; upgrade Chalk, fixing a number of type inference bugs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5285&quot;&gt;&lt;code&gt;#5285&lt;/code&gt;&lt;/a&gt; correctly determine cursor position when rewriting to a raw strings:&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/87071611-bdf35300-c21a-11ea-93d6-c04f1b1a8ac1.gif&quot; alt=&quot;87071611 bdf35300 c21a 11ea 93d6 c04f1b1a8ac1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5243&quot;&gt;&lt;code&gt;#5243&lt;/code&gt;&lt;/a&gt; consider EPERM error as other vscode processes using rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5252&quot;&gt;&lt;code&gt;#5252&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5255&quot;&gt;&lt;code&gt;#5255&lt;/code&gt;&lt;/a&gt; fix a bug where workspace symbols in workspace would skip symbols
from top-level crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5280&quot;&gt;&lt;code&gt;#5280&lt;/code&gt;&lt;/a&gt; re-enable completion for incomplete impl blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5288&quot;&gt;&lt;code&gt;#5288&lt;/code&gt;&lt;/a&gt; avoid accidentally overwriting config values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5286&quot;&gt;&lt;code&gt;#5286&lt;/code&gt;&lt;/a&gt; cap the maximal number of syntax errors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4996&quot;&gt;&lt;code&gt;#4996&lt;/code&gt;&lt;/a&gt; correctly generate new struct field in file containing struct def.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5311&quot;&gt;&lt;code&gt;#5311&lt;/code&gt;&lt;/a&gt; fix goto definition for type alias type parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5324&quot;&gt;&lt;code&gt;#5324&lt;/code&gt;&lt;/a&gt; show implementation code lens for unions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5328&quot;&gt;&lt;code&gt;#5328&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Change Visibility&lt;/strong&gt; assist works on statics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5330&quot;&gt;&lt;code&gt;#5330&lt;/code&gt;&lt;/a&gt; fix &lt;code&gt;ignore&lt;/code&gt; attribute autocompletion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5303&quot;&gt;&lt;code&gt;#5303&lt;/code&gt;&lt;/a&gt; speed up code completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5307&quot;&gt;&lt;code&gt;#5307&lt;/code&gt;&lt;/a&gt; document how to profile code completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5242&quot;&gt;&lt;code&gt;#5242&lt;/code&gt;&lt;/a&gt; upgrade salsa to 0.15.0 which significantly improves rust-analyzer&amp;#8217;s.
compile times, by avoiding repeated monomorphisations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5245&quot;&gt;&lt;code&gt;#5245&lt;/code&gt;&lt;/a&gt; prepare &lt;code&gt;AssistBuilder&lt;/code&gt; for assists which create new files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5247&quot;&gt;&lt;code&gt;#5247&lt;/code&gt;&lt;/a&gt; modernize completion tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5312&quot;&gt;&lt;code&gt;#5312&lt;/code&gt;&lt;/a&gt; make a slow test parallel.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #32</title>
        <pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/07/06/changelog-32.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/07/06/changelog-32.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/8b0983e89ad9a28b142eccf3755a8c9aaeb37852&quot;&gt;&lt;code&gt;8b0983e&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-07-06&quot;&gt;&lt;code&gt;2020-07-06&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week we&amp;#8217;d like to thank one of our individual sponsors, &lt;a href=&quot;https://github.com/anp&quot;&gt;@anp&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;@anp maintains &lt;a href=&quot;https://moxie.rs&quot;&gt;moxie&lt;/a&gt; project: a lightweight platform-agnostic declarative UI runtime, because incremental feedback latency and quality are core to building interactive software.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Become a sponsor:&lt;/strong&gt; &lt;a href=&quot;https://opencollective.com/rust-analyzer/&quot;&gt;opecollective.com/rust-analyzer&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5169&quot;&gt;&lt;code&gt;#5169&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5188&quot;&gt;&lt;code&gt;#5188&lt;/code&gt;&lt;/a&gt; initial support for dynamic workspace reloading.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/86605844-8335b480-bfa7-11ea-964f-72e06f535607.gif&quot; alt=&quot;86605844 8335b480 bfa7 11ea 964f 72e06f535607&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5119&quot;&gt;&lt;code&gt;#5119&lt;/code&gt;&lt;/a&gt; show notification while SSR is in progress.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5120&quot;&gt;&lt;code&gt;#5120&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5154&quot;&gt;&lt;code&gt;#5154&lt;/code&gt;&lt;/a&gt; add a simple SSR subcommand to the rust-analyzer command line binary:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;rust-analyzer ssr '$a.foo($b) ==&amp;gt; bar($a, $b)'&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5161&quot;&gt;&lt;code&gt;#5161&lt;/code&gt;&lt;/a&gt; add initial support for placeholder constraints in structural search replace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5142&quot;&gt;&lt;code&gt;#5142&lt;/code&gt;&lt;/a&gt; allow parallel type inference in batch mode (&lt;code&gt;rust-analyzer analysis-stats&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5178&quot;&gt;&lt;code&gt;#5178&lt;/code&gt;&lt;/a&gt; emit folding ranges for multiline calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5149&quot;&gt;&lt;code&gt;#5149&lt;/code&gt;&lt;/a&gt; implement Chalk variable kinds, which improves type inference for primitives.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5116&quot;&gt;&lt;code&gt;#5116&lt;/code&gt;&lt;/a&gt; set categories for code actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5192&quot;&gt;&lt;code&gt;#5192&lt;/code&gt;&lt;/a&gt; take &lt;code&gt;rust-analyzer.cargo.features&lt;/code&gt; into account when generating run configurations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5202&quot;&gt;&lt;code&gt;#5202&lt;/code&gt;&lt;/a&gt; allow to set default environment for run configurations (&lt;a href=&quot;https://rust-analyzer.github.io/manual.html#setting-runnable-environment-variables&quot;&gt;docs&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;jsonc&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.runnableEnv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// null mask means that this rule will be applied for all runnables&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// &quot;mask&quot;: null,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;APP_ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;APP_DATA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;asdf&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;test_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;APP_ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// overwrites only APP_ID&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4864&quot;&gt;&lt;code&gt;#4864&lt;/code&gt;&lt;/a&gt; Add optional target to crates in json project&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5122&quot;&gt;&lt;code&gt;#5122&lt;/code&gt;&lt;/a&gt; fix &quot;Run | Debug&quot; lens for examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5124&quot;&gt;&lt;code&gt;#5124&lt;/code&gt;&lt;/a&gt; partially fix handling of type params depending on type params.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5211&quot;&gt;&lt;code&gt;#5211&lt;/code&gt;&lt;/a&gt; partially fix inference of indexing argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5096&quot;&gt;&lt;code&gt;#5096&lt;/code&gt;&lt;/a&gt; fix handling of whitespace when applying SSR within macro expansions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5110&quot;&gt;&lt;code&gt;#5110&lt;/code&gt;&lt;/a&gt; fix call hierarchy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5179&quot;&gt;&lt;code&gt;#5179&lt;/code&gt;&lt;/a&gt; lower fields despite invalid type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5089&quot;&gt;&lt;code&gt;#5089&lt;/code&gt;&lt;/a&gt; disable auto-complete on comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5189&quot;&gt;&lt;code&gt;#5189&lt;/code&gt;&lt;/a&gt; record and suggest assoc. items of traits via ImportMap.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5212&quot;&gt;&lt;code&gt;#5212&lt;/code&gt;&lt;/a&gt; fix renaming of nested out of line modules &lt;code&gt;mod outer { mod inner; }&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5136&quot;&gt;&lt;code&gt;#5136&lt;/code&gt;&lt;/a&gt; split namespace maps in &lt;code&gt;ItemScope&lt;/code&gt;, reducing memory usage of the CrateDefMap query by ~130 MB (50%) on r-a.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5175&quot;&gt;&lt;code&gt;#5175&lt;/code&gt;&lt;/a&gt; more memory-efficient impl collection.
This saves roughly 90 MB in &lt;code&gt;ImplsFromDepsQuery&lt;/code&gt;, which used to copy the list of all impls from libcore into &lt;strong&gt;every&lt;/strong&gt; crate in the graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5127&quot;&gt;&lt;code&gt;#5127&lt;/code&gt;&lt;/a&gt; improve test infra for type inference test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5126&quot;&gt;&lt;code&gt;#5126&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;FxHash{Map,Set}&lt;/code&gt; consistently.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5101&quot;&gt;&lt;code&gt;#5101&lt;/code&gt;&lt;/a&gt; add expect&amp;#8201;&amp;#8212;&amp;#8201;a lighter-weight alternative to the &lt;code&gt;insta&lt;/code&gt; snapshot testing library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5137&quot;&gt;&lt;code&gt;#5137&lt;/code&gt;&lt;/a&gt; make gotodef tests more data-driven.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5138&quot;&gt;&lt;code&gt;#5138&lt;/code&gt;&lt;/a&gt; refactor runnable tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5146&quot;&gt;&lt;code&gt;#5146&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5151&quot;&gt;&lt;code&gt;#5151&lt;/code&gt;&lt;/a&gt; simplify inlay hints tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5153&quot;&gt;&lt;code&gt;#5153&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5156&quot;&gt;&lt;code&gt;#5156&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5157&quot;&gt;&lt;code&gt;#5157&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5162&quot;&gt;&lt;code&gt;#5162&lt;/code&gt;&lt;/a&gt; remove some generics from &lt;code&gt;ra_hir&lt;/code&gt; interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5158&quot;&gt;&lt;code&gt;#5158&lt;/code&gt;&lt;/a&gt; correctly distinguish between semantical and display crate names.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5160&quot;&gt;&lt;code&gt;#5160&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5167&quot;&gt;&lt;code&gt;#5167&lt;/code&gt;&lt;/a&gt; reuse caches in more cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5176&quot;&gt;&lt;code&gt;#5176&lt;/code&gt;&lt;/a&gt; update expand macro tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5193&quot;&gt;&lt;code&gt;#5193&lt;/code&gt;&lt;/a&gt; move &lt;code&gt;cargo metadata&lt;/code&gt; off the main loop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5199&quot;&gt;&lt;code&gt;#5199&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5200&quot;&gt;&lt;code&gt;#5200&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5201&quot;&gt;&lt;code&gt;#5201&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5205&quot;&gt;&lt;code&gt;#5205&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5214&quot;&gt;&lt;code&gt;#5214&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5215&quot;&gt;&lt;code&gt;#5215&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5219&quot;&gt;&lt;code&gt;#5219&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5221&quot;&gt;&lt;code&gt;#5221&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5226&quot;&gt;&lt;code&gt;#5226&lt;/code&gt;&lt;/a&gt; refactor completion tests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5197&quot;&gt;&lt;code&gt;#5197&lt;/code&gt;&lt;/a&gt; SSR internal refactors.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5222&quot;&gt;&lt;code&gt;#5222&lt;/code&gt;&lt;/a&gt; add &quot;rehighlight after adding a new top-level function&quot; to the set of bechmarks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #31</title>
        <pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/29/changelog-31.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/29/changelog-31.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/ca31b1d63ae91a69f1ce9c0b075403834ba19f38&quot;&gt;&lt;code&gt;ca31b1d&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-29&quot;&gt;&lt;code&gt;2020-06-29&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we&amp;#8217;d like to thank another long-time sponsor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://www.parity.io/&quot;&gt;Parity&lt;/a&gt; is building tooling and infrastructure for the decentralised, trustless Web in Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4990&quot;&gt;&lt;code&gt;#4990&lt;/code&gt;&lt;/a&gt; introduce an &lt;code&gt;ItemTree&lt;/code&gt; layer to avoid reparsing files.
This reduces the latency of &quot;go to definition&quot; in a simple benchmark on rust-analyzer by around 30%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5017&quot;&gt;&lt;code&gt;#5017&lt;/code&gt;&lt;/a&gt; add custom cargo runners support. This adds an option to delegate actual cargo commands building to another extension.
For example, to use a different manager like &lt;a href=&quot;https://github.com/rust-embedded/cross&quot;&gt;cross&lt;/a&gt;.
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=vsrs.cross-rust-analyzer&quot;&gt;cross-rust-analyzer&lt;/a&gt; is an example of such extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5069&quot;&gt;&lt;code&gt;#5069&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Extract Variable&lt;/strong&gt; understands field init shorthand&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/86007529-d2b03980-ba17-11ea-998f-0e44f659041f.gif&quot; alt=&quot;86007529 d2b03980 ba17 11ea 998f 0e44f659041f&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4999&quot;&gt;&lt;code&gt;#4999&lt;/code&gt;&lt;/a&gt; allow matching of whole macro calls in structural search replace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5007&quot;&gt;&lt;code&gt;#5007&lt;/code&gt;&lt;/a&gt; allow matching within macro calls in structural search replace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4997&quot;&gt;&lt;code&gt;#4997&lt;/code&gt;&lt;/a&gt; document GNOME Builder (Nightly) support for rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4940&quot;&gt;&lt;code&gt;#4940&lt;/code&gt;&lt;/a&gt; set &lt;code&gt;injected&lt;/code&gt; modifier for code in doctests.
Theme authors can use it to dim injected code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5047&quot;&gt;&lt;code&gt;#5047&lt;/code&gt;&lt;/a&gt; matching brace works for | in lambdas&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/86006971-122a5600-ba17-11ea-8be7-f60b0a97eead.gif&quot; alt=&quot;86006971 122a5600 ba17 11ea 8be7 f60b0a97eead&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5066&quot;&gt;&lt;code&gt;#5066&lt;/code&gt;&lt;/a&gt; infer type for slice wildcard patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4587&quot;&gt;&lt;code&gt;#4587&lt;/code&gt;&lt;/a&gt; missing unsafe diagnostics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5100&quot;&gt;&lt;code&gt;#5100&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5102&quot;&gt;&lt;code&gt;#5102&lt;/code&gt;&lt;/a&gt;: Add support for &lt;code&gt;include_str&lt;/code&gt; and &lt;code&gt;include_bytes&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4900&quot;&gt;&lt;code&gt;#4900&lt;/code&gt;&lt;/a&gt; fix name resolution for &lt;code&gt;Self&lt;/code&gt; in enums.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4988&quot;&gt;&lt;code&gt;#4988&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t offer to add missing fields of unknown types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4992&quot;&gt;&lt;code&gt;#4992&lt;/code&gt;&lt;/a&gt; never disable error logging on the frontend.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5002&quot;&gt;&lt;code&gt;#5002&lt;/code&gt;&lt;/a&gt; fix underflow panic when doctests are at top of file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5004&quot;&gt;&lt;code&gt;#5004&lt;/code&gt;&lt;/a&gt; fix panic in split/merge import assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5023&quot;&gt;&lt;code&gt;#5023&lt;/code&gt;&lt;/a&gt; fix string literal inference in match.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5015&quot;&gt;&lt;code&gt;#5015&lt;/code&gt;&lt;/a&gt; account for updated module ids when determining whether a resolution is changed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5033&quot;&gt;&lt;code&gt;#5033&lt;/code&gt;&lt;/a&gt; order of glob imports does not affect import shadowing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4976&quot;&gt;&lt;code&gt;#4976&lt;/code&gt;&lt;/a&gt; new VFS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5068&quot;&gt;&lt;code&gt;#5068&lt;/code&gt;&lt;/a&gt; prepare for dynamic project reloading.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rewrite main loop in rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4982&quot;&gt;&lt;code&gt;#4982&lt;/code&gt;&lt;/a&gt; upgrade chalk. This, and other type system improvements, bring the proportion of of unknown types in rust-analzyer to less than 1%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4983&quot;&gt;&lt;code&gt;#4983&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5010&quot;&gt;&lt;code&gt;#5010&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;paths::RelPath[Buf]&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5013&quot;&gt;&lt;code&gt;#5013&lt;/code&gt;&lt;/a&gt; uniformly trim test data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5014&quot;&gt;&lt;code&gt;#5014&lt;/code&gt;&lt;/a&gt; centralize test data parsing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5029&quot;&gt;&lt;code&gt;#5029&lt;/code&gt;&lt;/a&gt; use &lt;code&gt;paths::AbsPath&lt;/code&gt; in more places.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5034&quot;&gt;&lt;code&gt;#5034&lt;/code&gt;&lt;/a&gt; cleanup project.json deserialization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5048&quot;&gt;&lt;code&gt;#5048&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/5056&quot;&gt;&lt;code&gt;#5056&lt;/code&gt;&lt;/a&gt; Canonicalize actor API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #30</title>
        <pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/22/changelog-30.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/22/changelog-30.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/3370c81525c89c4f3229180f83520de29b7ee8a0&quot;&gt;&lt;code&gt;3370c81&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-22&quot;&gt;&lt;code&gt;2020-06-22&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we&amp;#8217;d like to thank another long-time sponsor:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://discord.com&quot;&gt;Discord&lt;/a&gt;, a place to talk with your communities and friends, built using &lt;a href=&quot;https://discord.gg/rust-lang&quot;&gt;Rust&lt;/a&gt; and other best-in-class tools.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4839&quot;&gt;&lt;code&gt;#4839&lt;/code&gt;&lt;/a&gt; implement goto type definition for inlay hints&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/62505555/83335671-0122e380-a2b7-11ea-9922-fbdcfb11a7f3.gif&quot; alt=&quot;83335671 0122e380 a2b7 11ea 9922 fbdcfb11a7f3&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4851&quot;&gt;&lt;code&gt;#4851&lt;/code&gt;&lt;/a&gt; add quickfix to add a struct field&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/85289481-d253f380-b497-11ea-8089-2f21e3fdb75e.gif&quot; alt=&quot;85289481 d253f380 b497 11ea 8089 2f21e3fdb75e&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4860&quot;&gt;&lt;code&gt;#4860&lt;/code&gt;&lt;/a&gt; accept relative paths in rust-project.json.
If a relative path is found as part of Crate.root_module or Root.path, interpret it as relative to the location of the rust-project.json file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4878&quot;&gt;&lt;code&gt;#4878&lt;/code&gt;&lt;/a&gt; make &lt;strong&gt;Replace Qualified Name With Use&lt;/strong&gt; replace &lt;strong&gt;all&lt;/strong&gt; mentions of the path.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4919&quot;&gt;&lt;code&gt;#4919&lt;/code&gt;&lt;/a&gt; Structural Search Replace no longer requires to specify the type of the capture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4916&quot;&gt;&lt;code&gt;#4916&lt;/code&gt;&lt;/a&gt; add configuration options to treat certain &lt;code&gt;cargo check&lt;/code&gt; warnings with hint or information severity.&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.diagnostics.warningsAsHint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;unused_variables&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4925&quot;&gt;&lt;code&gt;#4925&lt;/code&gt;&lt;/a&gt; highlighting escape sequences in strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4903&quot;&gt;&lt;code&gt;#4903&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;documentation&lt;/code&gt; to the list of semantic tokens modifiers for code inside doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4963&quot;&gt;&lt;code&gt;#4963&lt;/code&gt;&lt;/a&gt; download artifacts into tmp dir.
This should prevent partially downloaded files in cases when the user closes vsode before the download is complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4969&quot;&gt;&lt;code&gt;#4969&lt;/code&gt;&lt;/a&gt; handle bindings after @ in patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4877&quot;&gt;&lt;code&gt;#4877&lt;/code&gt;&lt;/a&gt; fix syntax highlighting of recursive macros.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4876&quot;&gt;&lt;code&gt;#4876&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t highlight unresolved references in doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4915&quot;&gt;&lt;code&gt;#4915&lt;/code&gt;&lt;/a&gt; only highlight rust code in doc comments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4959&quot;&gt;&lt;code&gt;#4959&lt;/code&gt;&lt;/a&gt; syntax highlighting for documentation comments on macro definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4914&quot;&gt;&lt;code&gt;#4914&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4930&quot;&gt;&lt;code&gt;#4930&lt;/code&gt;&lt;/a&gt; fix panic in match checking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4821&quot;&gt;&lt;code&gt;#4821&lt;/code&gt;&lt;/a&gt; display doctest code lens before comment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4950&quot;&gt;&lt;code&gt;#4950&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4952&quot;&gt;&lt;code&gt;#4952&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4957&quot;&gt;&lt;code&gt;#4957&lt;/code&gt;&lt;/a&gt; fix panics in type inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4958&quot;&gt;&lt;code&gt;#4958&lt;/code&gt;&lt;/a&gt; fix type inference for Fn traits.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4891&quot;&gt;&lt;code&gt;#4891&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4948&quot;&gt;&lt;code&gt;#4948&lt;/code&gt;&lt;/a&gt; add API for the new Virtual File System.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4947&quot;&gt;&lt;code&gt;#4947&lt;/code&gt;&lt;/a&gt; improve type checking to use up to 20% less memory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4934&quot;&gt;&lt;code&gt;#4934&lt;/code&gt;&lt;/a&gt; directly leverage salsa queries for computing symbol index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4937&quot;&gt;&lt;code&gt;#4937&lt;/code&gt;&lt;/a&gt; allow overriding rust-analyzer display version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4961&quot;&gt;&lt;code&gt;#4961&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4964&quot;&gt;&lt;code&gt;#4964&lt;/code&gt;&lt;/a&gt; centralize in-flight LSP requests handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4962&quot;&gt;&lt;code&gt;#4962&lt;/code&gt;&lt;/a&gt; expand parsing API to allow more node types for SSR.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #29</title>
        <pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/15/changelog-29.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/15/changelog-29.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/017331a53c1eeaa1253d2829165627bfa27dc124&quot;&gt;&lt;code&gt;017331a&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-15&quot;&gt;&lt;code&gt;2020-06-15&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we&amp;#8217;d like to give a shoutout to one of our oldest sponsors:
&lt;a href=&quot;https://embark-studios.com/&quot;&gt;Embark Studios&lt;/a&gt;, a Stockholm-based game studio building a platform for the future of gamemaking and striving to support a thriving open-source ecosystem for game development in Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4683&quot;&gt;&lt;code&gt;#4683&lt;/code&gt;&lt;/a&gt; initial version of semantic syntax highlighting for code inside doc comments.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/201808/83415249-1f0b5800-a41f-11ea-8fa6-c282434d6ff7.png&quot; alt=&quot;83415249 1f0b5800 a41f 11ea 8fa6 c282434d6ff7&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4576&quot;&gt;&lt;code&gt;#4576&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Extract Enum Variant to Struct&lt;/strong&gt; refactoring.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/84659254-6f9ead00-af17-11ea-84ab-bea16f160ecf.gif&quot; alt=&quot;84659254 6f9ead00 af17 11ea 84ab bea16f160ecf&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4822&quot;&gt;&lt;code&gt;#4822&lt;/code&gt;&lt;/a&gt; &lt;code&gt;checkOnSave&lt;/code&gt; cargo flags by default are inherited from cargo flags.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4700&quot;&gt;&lt;code&gt;#4700&lt;/code&gt;&lt;/a&gt; add top level keywords completion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4775&quot;&gt;&lt;code&gt;#4775&lt;/code&gt;&lt;/a&gt; goto definition work correctly for fields of enum variants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4784&quot;&gt;&lt;code&gt;#4784&lt;/code&gt;&lt;/a&gt; correctly handle &lt;code&gt;cfg&lt;/code&gt;s from &lt;code&gt;rust-project.json&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4803&quot;&gt;&lt;code&gt;#4803&lt;/code&gt;&lt;/a&gt; parse default unsafe fn.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4811&quot;&gt;&lt;code&gt;#4811&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Unwrap Block&lt;/strong&gt; works with match arms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4815&quot;&gt;&lt;code&gt;#4815&lt;/code&gt;&lt;/a&gt; correctly parse &amp;lt;_&amp;gt; paths in patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4834&quot;&gt;&lt;code&gt;#4834&lt;/code&gt;&lt;/a&gt; in field patterns, don&amp;#8217;t highlight local binding as a field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4850&quot;&gt;&lt;code&gt;#4850&lt;/code&gt;&lt;/a&gt; indent chain &lt;code&gt;.&lt;/code&gt; even if there&amp;#8217;s more stuff afterwards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4849&quot;&gt;&lt;code&gt;#4849&lt;/code&gt;&lt;/a&gt; make known paths use &lt;code&gt;core&lt;/code&gt; instead of &lt;code&gt;std&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4833&quot;&gt;&lt;code&gt;#4833&lt;/code&gt;&lt;/a&gt; separating parsing of &lt;code&gt;for&lt;/code&gt; in predicates and types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4858&quot;&gt;&lt;code&gt;#4858&lt;/code&gt;&lt;/a&gt; prefer shorter paths for external items in auto import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4857&quot;&gt;&lt;code&gt;#4857&lt;/code&gt;&lt;/a&gt; fix invalid shorthand initialization diagnostic for tuple structs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4862&quot;&gt;&lt;code&gt;#4862&lt;/code&gt;&lt;/a&gt; re-enable &quot;Warning&quot; diagnostic severity for unused variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4805&quot;&gt;&lt;code&gt;#4805&lt;/code&gt;&lt;/a&gt; finish JsonProject transition to cfgs from the separate atoms and features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4810&quot;&gt;&lt;code&gt;#4810&lt;/code&gt;&lt;/a&gt; simplify unwrapping of blocks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4832&quot;&gt;&lt;code&gt;#4832&lt;/code&gt;&lt;/a&gt; reduce &lt;code&gt;OUT_DIR&lt;/code&gt; special casing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4819&quot;&gt;&lt;code&gt;#4819&lt;/code&gt;&lt;/a&gt; auto import go brrr (add an FST index to &lt;code&gt;ImportMap&lt;/code&gt; and use it to speed up auto import).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4843&quot;&gt;&lt;code&gt;#4843&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t guess macro expansion crate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4875&quot;&gt;&lt;code&gt;#4875&lt;/code&gt;&lt;/a&gt; introduce paths crate to track absolutness of path in the type system.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #28</title>
        <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/08/changelog-28.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/08/changelog-28.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/d6967762dd1fff3cfb65d481ba5a169143205c0e&quot;&gt;&lt;code&gt;d696776&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-08&quot;&gt;&lt;code&gt;2020-06-08&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4711&quot;&gt;&lt;code&gt;#4711&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t pass &lt;code&gt;--all-features&lt;/code&gt; by default, use Cargo&amp;#8217;s default features instead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4720&quot;&gt;&lt;code&gt;#4720&lt;/code&gt;&lt;/a&gt; highlight unsafe operations inside unsafe blocks. In VS Code, you can use &lt;code&gt;editor.semanticTokenColorCustomizations&lt;/code&gt; to customize the actual coloring&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;editor.semanticTokenColorCustomizations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;[Theme Name]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;operator.unsafe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#f00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;function.unsafe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#f00&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/84034187-48d1fb00-a99a-11ea-960b-e6b3f73e7db1.png&quot; alt=&quot;84034187 48d1fb00 a99a 11ea 960b e6b3f73e7db1&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4382&quot;&gt;&lt;code&gt;#4382&lt;/code&gt;&lt;/a&gt; allow specifying key-value cfg options in JsonProject.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4726&quot;&gt;&lt;code&gt;#4726&lt;/code&gt;&lt;/a&gt; allow to override build-in project discovery with explicit list of `Cargo.toml`s to import:&lt;/p&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;rouge highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;table class=&quot;linenotable&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;linenos gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rust-analyzer.linkedProjects&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/home/projects/rust-analyzer/Cargo.toml&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4730&quot;&gt;&lt;code&gt;#4730&lt;/code&gt;&lt;/a&gt; document &lt;code&gt;rust-project.json&lt;/code&gt; file format, which can be used with non-Cargo based build systems.
Docs: &lt;a href=&quot;https://rust-analyzer.github.io/manual.html#non-cargo-based-projects&quot;&gt;#non-cargo-based-projects&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4660&quot;&gt;&lt;code&gt;#4660&lt;/code&gt;&lt;/a&gt; enable hover and autocomplete docs on macro generated items.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4748&quot;&gt;&lt;code&gt;#4748&lt;/code&gt;&lt;/a&gt; implement hover actions, as an alternative UI for code lenses.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/84036613-b6cbf180-a99d-11ea-81e3-f3ecd9142937.gif&quot; alt=&quot;84036613 b6cbf180 a99d 11ea 81e3 f3ecd9142937&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4689&quot;&gt;&lt;code&gt;#4689&lt;/code&gt;&lt;/a&gt; implement return position impl trait.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4750&quot;&gt;&lt;code&gt;#4750&lt;/code&gt;&lt;/a&gt; fix &lt;strong&gt;Introduce Named Lifetime&lt;/strong&gt; assist to work in more cases.&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/84036167-22fa2580-a99d-11ea-8fec-493520297c3d.gif&quot; alt=&quot;84036167 22fa2580 a99d 11ea 8fec 493520297c3d&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4580&quot;&gt;&lt;code&gt;#4580&lt;/code&gt;&lt;/a&gt; invoke correct cargo for &lt;code&gt;run&lt;/code&gt; action in VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4658&quot;&gt;&lt;code&gt;#4658&lt;/code&gt;&lt;/a&gt; fix lexing of format strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4721&quot;&gt;&lt;code&gt;#4721&lt;/code&gt;&lt;/a&gt; use correct modifier for unused code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4502&quot;&gt;&lt;code&gt;#4502&lt;/code&gt;&lt;/a&gt; mark fixes from diagnostics as quick fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4737&quot;&gt;&lt;code&gt;#4737&lt;/code&gt;&lt;/a&gt; parse default unsafe &amp;amp; default const.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4765&quot;&gt;&lt;code&gt;#4765&lt;/code&gt;&lt;/a&gt; fix type parameter defaults.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4761&quot;&gt;&lt;code&gt;#4761&lt;/code&gt;&lt;/a&gt; use Chalk from crates.io.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4748&quot;&gt;&lt;code&gt;#4748&lt;/code&gt;&lt;/a&gt; build specialized index to improve auto-import performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4717&quot;&gt;&lt;code&gt;#4717&lt;/code&gt;&lt;/a&gt; compute assists text edits lazily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4703&quot;&gt;&lt;code&gt;#4703&lt;/code&gt;&lt;/a&gt; document review process and contribution guidelines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4772&quot;&gt;&lt;code&gt;#4772&lt;/code&gt;&lt;/a&gt; document certain high-level internal architecture invariants.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4688&quot;&gt;&lt;code&gt;#4688&lt;/code&gt;&lt;/a&gt; document initilizationOptions used by rust-analyzer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4710&quot;&gt;&lt;code&gt;#4710&lt;/code&gt;&lt;/a&gt; make LSP extension for running tests &amp;amp; binaries less rust-specific.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4723&quot;&gt;&lt;code&gt;#4723&lt;/code&gt;&lt;/a&gt; derive local roots from workspace configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4724&quot;&gt;&lt;code&gt;#4724&lt;/code&gt;&lt;/a&gt; rename WorldState &amp;#8594; GlobalState.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4758&quot;&gt;&lt;code&gt;#4758&lt;/code&gt;&lt;/a&gt; actually test &lt;code&gt;include!(concant!(env!()))&lt;/code&gt; pattern.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4760&quot;&gt;&lt;code&gt;#4760&lt;/code&gt;&lt;/a&gt; preliminary refactorings in preparation for new VFS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #27</title>
        <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/06/01/changelog-27.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/06/01/changelog-27.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/7ae247f03c639d6e704159df7f0120466afc3c30&quot;&gt;&lt;code&gt;7ae247f&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-06-01&quot;&gt;&lt;code&gt;2020-06-01&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4646&quot;&gt;&lt;code&gt;#4646&lt;/code&gt;&lt;/a&gt; users.rust-lang.org now includes a dedicated category for IDE-related questions: &lt;a href=&quot;https://users.rust-lang.org/c/ide/14&quot;&gt;IDEs and editors&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4664&quot;&gt;&lt;code&gt;#4664&lt;/code&gt;&lt;/a&gt; add most of the features of rust-analyzer to the manual.
Each feature includes a link to the source code which implements the feature.
If something does not work exactly as you want it to, you know what to do ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4602&quot;&gt;&lt;code&gt;#4602&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4603&quot;&gt;&lt;code&gt;#4603&lt;/code&gt;&lt;/a&gt; add semantic token types for boolean literals and self keyword.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4621&quot;&gt;&lt;code&gt;#4621&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4654&quot;&gt;&lt;code&gt;#4654&lt;/code&gt;&lt;/a&gt; highlighting for &lt;code&gt;?&lt;/code&gt; operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4534&quot;&gt;&lt;code&gt;#4534&lt;/code&gt;&lt;/a&gt; &lt;code&gt;.call&lt;/code&gt; postfix completion.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4640&quot;&gt;&lt;code&gt;#4640&lt;/code&gt;&lt;/a&gt; add &lt;code&gt;inRustProject&lt;/code&gt; when-clause for commands in vscode.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4648&quot;&gt;&lt;code&gt;#4648&lt;/code&gt;&lt;/a&gt; support the nightly raw reference operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4562&quot;&gt;&lt;code&gt;#4562&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Introduce Named Lifetime&lt;/strong&gt; assist.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4612&quot;&gt;&lt;code&gt;#4612&lt;/code&gt;&lt;/a&gt; correctly tag releases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4617&quot;&gt;&lt;code&gt;#4617&lt;/code&gt;&lt;/a&gt; fix rendering of hover.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4629&quot;&gt;&lt;code&gt;#4629&lt;/code&gt;&lt;/a&gt; don&amp;#8217;t display inlay hints in diff view in VS Code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4596&quot;&gt;&lt;code&gt;#4596&lt;/code&gt;&lt;/a&gt; when completing parameter names, don&amp;#8217;t include leading underscore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4592&quot;&gt;&lt;code&gt;#4592&lt;/code&gt;&lt;/a&gt; correctly compute text edit during completion if the partially-typed identifier is a keyword.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4651&quot;&gt;&lt;code&gt;#4651&lt;/code&gt;&lt;/a&gt; to improve completion, prefer first type in &lt;code&gt;if else&lt;/code&gt; if there&amp;#8217;s a type mismatch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4653&quot;&gt;&lt;code&gt;#4653&lt;/code&gt;&lt;/a&gt; fix match ergonomics in closure parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4667&quot;&gt;&lt;code&gt;#4667&lt;/code&gt;&lt;/a&gt; infer labelled breaks correctly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4669&quot;&gt;&lt;code&gt;#4669&lt;/code&gt;&lt;/a&gt; in VS Code plugin always derive from &lt;code&gt;process.env&lt;/code&gt; when spawning a child process/shell execution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4674&quot;&gt;&lt;code&gt;#4674&lt;/code&gt;&lt;/a&gt; recursively search submodules to find modules in which a definition is visible.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4605&quot;&gt;&lt;code&gt;#4605&lt;/code&gt;&lt;/a&gt; flatten TypeScript module hierarchy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4607&quot;&gt;&lt;code&gt;#4607&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4611&quot;&gt;&lt;code&gt;#4611&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4632&quot;&gt;&lt;code&gt;#4632&lt;/code&gt;&lt;/a&gt; document more LSP extensions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4641&quot;&gt;&lt;code&gt;#4641&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4652&quot;&gt;&lt;code&gt;#4652&lt;/code&gt;&lt;/a&gt; upgrade Chalk.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
      <item>
        <title>Changelog #26</title>
        <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
        <link>https://rust-analyzer.github.io//thisweek/2020/05/25/changelog-26.html</link>
        <guid isPermaLink="true">https://rust-analyzer.github.io//thisweek/2020/05/25/changelog-26.html</guid>
        <description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Commit: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/commit/fbb8b884a2dbc3ced720c84f4604466e223f6d69&quot;&gt;&lt;code&gt;fbb8b88&lt;/code&gt;&lt;/a&gt;&lt;br&gt;
Release: &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/releases/2020-05-25&quot;&gt;&lt;code&gt;2020-05-25&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the effort to improve support for all editors, and to speedup acceptance of rust-analyzer extensions to the Language Server Protocol, all extensions are now documented:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/blob/1527feb744c7911b6ca482554f0399d3ef0ebfdc/docs/dev/lsp-extensions.md&quot;&gt;&lt;code&gt;lsp-extensions.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you maintain rust-analyzer plugin for some editor, consider implementing these extensions and giving feedback for the corresponding upstream issue at &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol/&quot;&gt;Microsoft/language-server-protocol&lt;/a&gt;.
Additionally, consider subscribing to &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/issues/4604&quot;&gt;#4604&lt;/a&gt;, which will announce all future extensions and changes.
Note that we don&amp;#8217;t have any compatibility guarantees yet&amp;#8201;&amp;#8212;&amp;#8201;all our extensions are subject to change on a short notice.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;sponsors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#sponsors&quot;&gt;&lt;/a&gt;Sponsors&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Starting this week, we&amp;#8217;ll be mentioning our significant Open Collective backers of &quot;Sponsor&quot; level or higher in the changelogs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This week, we welcome a new sponsor: &lt;a href=&quot;https://www.prisma.io/&quot;&gt;Prisma&lt;/a&gt;, a modern database toolkit for Node.js and TypeScript built with Rust under the hood.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#new-features&quot;&gt;&lt;/a&gt;New Features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4518&quot;&gt;&lt;code&gt;#4518&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Add TurboFish&lt;/strong&gt; assist&lt;/p&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/1711539/82789805-3cfb1a80-9e6b-11ea-9100-a14d722d2620.gif&quot; alt=&quot;82789805 3cfb1a80 9e6b 11ea 9100 a14d722d2620&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4464&quot;&gt;&lt;code&gt;#4464&lt;/code&gt;&lt;/a&gt; &lt;strong&gt;Run&lt;/strong&gt; action passes &lt;code&gt;--feature&lt;/code&gt; flags to cargo based on the required &lt;code&gt;cfg&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4555&quot;&gt;&lt;code&gt;#4555&lt;/code&gt;&lt;/a&gt; on NixOS, automatically &lt;code&gt;patchelf&lt;/code&gt; downloaded rust-analyzer binary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4474&quot;&gt;&lt;code&gt;#4474&lt;/code&gt;&lt;/a&gt; highlight attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4556&quot;&gt;&lt;code&gt;#4556&lt;/code&gt;&lt;/a&gt; dedicated highlighting for &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fixes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#fixes&quot;&gt;&lt;/a&gt;Fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4491&quot;&gt;&lt;code&gt;#4491&lt;/code&gt;&lt;/a&gt; run doctest feature works on item inside impls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4505&quot;&gt;&lt;code&gt;#4505&lt;/code&gt;&lt;/a&gt; infer return type of loops with value breaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4528&quot;&gt;&lt;code&gt;#4528&lt;/code&gt;&lt;/a&gt; fix debug lens fix for binary targets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4526&quot;&gt;&lt;code&gt;#4526&lt;/code&gt;&lt;/a&gt; take tree at fixing ▶ symbol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4559&quot;&gt;&lt;code&gt;#4559&lt;/code&gt;&lt;/a&gt; add blank line after module path in hover text.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;internal-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#internal-improvements&quot;&gt;&lt;/a&gt;Internal Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4538&quot;&gt;&lt;code&gt;#4538&lt;/code&gt;&lt;/a&gt; add tests for VS Code extension.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4494&quot;&gt;&lt;code&gt;#4494&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4519&quot;&gt;&lt;code&gt;#4519&lt;/code&gt;&lt;/a&gt; change implementation of code actions to use snippets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4543&quot;&gt;&lt;code&gt;#4543&lt;/code&gt;&lt;/a&gt; remove old infrastructure for cursor placement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4552&quot;&gt;&lt;code&gt;#4552&lt;/code&gt;&lt;/a&gt; use snippets for &lt;code&gt;onEnter&lt;/code&gt; handling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4569&quot;&gt;&lt;code&gt;#4569&lt;/code&gt;&lt;/a&gt; change implementation of code action groups to make it upstreamable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4501&quot;&gt;&lt;code&gt;#4501&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4506&quot;&gt;&lt;code&gt;#4506&lt;/code&gt;&lt;/a&gt; improve performance of auto-import.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4520&quot;&gt;&lt;code&gt;#4520&lt;/code&gt;&lt;/a&gt; better test marks infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4532&quot;&gt;&lt;code&gt;#4532&lt;/code&gt;&lt;/a&gt; split change_visibility and fix_visibility assists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4516&quot;&gt;&lt;code&gt;#4516&lt;/code&gt;&lt;/a&gt; use two-stage LSP initialization, to better account for capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4571&quot;&gt;&lt;code&gt;#4571&lt;/code&gt;&lt;/a&gt; remove &lt;code&gt;label&lt;/code&gt; from &lt;code&gt;SourceChange&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4570&quot;&gt;&lt;code&gt;#4570&lt;/code&gt;&lt;/a&gt; leverage Chalk&amp;#8217;s impls for built-ins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4573&quot;&gt;&lt;code&gt;#4573&lt;/code&gt;&lt;/a&gt; cleanup Chalk integration code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4575&quot;&gt;&lt;code&gt;#4575&lt;/code&gt;&lt;/a&gt; leverage Chalk&amp;#8217;s impls for functions items and pointers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4590&quot;&gt;&lt;code&gt;#4590&lt;/code&gt;&lt;/a&gt; upgrade &lt;code&gt;rustc_lexer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rust-analyzer/rust-analyzer/pull/4495&quot;&gt;&lt;code&gt;#4495&lt;/code&gt;&lt;/a&gt; improve parsing of test fixtures.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
      </item>
    
  </channel>
</rss>
